// This uses the SCSS pre-processor language for CSS design.  Like Pub, this allows for much cleaner code.  It also allows helps with more complicated designs, allowing other people to see how things woork.

// A couple things that make this cleaner are the consistent alignment of CSS property fields, and the common pattern of how the various mixins are used.

// COMMON MIXINS (ever expanding)
@mixin wh($w, $h) {
  width:  $w;
  height: $h;
}

@mixin tl($t, $l) {
  top:  $t;
  left: $l;
}

@mixin tr($t, $r) {
  top:   $t;
  right: $r;
}

@mixin pseudo {
  position: absolute;
  content:  '';
}

@mixin triangle {
  -webkit-clip-path:
    polygon(50% 0%,
            40% 100%,
            60% 100%);
  clip-path:
    polygon(50% 0%,
            40% 100%,
            60% 100%);
}


// $className -  base name for line divs (allows indenpendent graphs)
// $barWeight -  thickness of each bar
// $barRadius -  end radius of bars
// $values -     relative values for each bar (include units in list)
// $colors -     list of matching colors for bars
// $animations - list of matching annimations for bars (overkill?)
@mixin bar-graph($className, $barWeight, $barRadius, $values, $colors, $animations) {
  @for $i from 1 through length($colors) {
    .#{$className}-#{$i} {
      height:           $barWeight;
      width:            nth($values, $i);
      background-color: nth($colors, $i);
      border-radius:    0 $barRadius $barRadius 0;
      animation:        nth($animations, $i);
    }
  }
}

// ANIMATION DECLARATIONS
//animation: show-NAME $animation-duration $animation-timing-function $animation-delay $animation-iteration-count $animation-direction $animation-fill-mode $animation-play-state;
$animation-duration:         10s;
$animation-delay:            0s;
$animation-timing-function:  linear;     // linear, ease,	ease-in,ease-out, ease-in-out, step-start, step-end, steps(int,start|end), cubic-bezier(n,n,n,n), initial, inherit
$animation-iteration-count:  infinite; // infinite, <number>
$animation-direction:        normal;   // normal, reverse, alternate, alternate-reverse, initial, inherit
$animation-fill-mode:        forwards;     // none, forwards, backwards, both, initial, inherit
$animation-play-state:       running;  // paused, rinning, initial, inherit
$animation-params: $animation-duration $animation-timing-function $animation-delay $animation-iteration-count $animation-direction $animation-fill-mode $animation-play-state;

// APPLICATION SPECIFIC VARIABLES

$black:          #000000;
$white:          #FFFFFF;
$grey:           #5A6378;
$blue:           #2E6AE1;
$purple:         #912382;
$yellow:         #C47435;

$body-color:        $white;
$background-color:  $black;
$title-color:       $purple;
$title-span-color:  $yellow;
$learning-color:    $purple;
$footer-color:      $blue;
$footer-link:       $yellow;


// COMMON CLASS STYLES
body {
  background:    $background-color;
  color:         $body-color;
  font-family:   sans-serif;
}

.box {
  position:      relative;
  @include       wh(400px, 400px);
  margin:        auto;
  background:    none;
  //border:        solid 1px;
  //overflow:      hidden;
  animation:     show-box $animation-params;
}

.title {
  font-size:     1.5em;
  text-align:    center;
  color:         $title-color;
  margin-bottom: 60px;
}

.title span {
  color:         $title-span-color;
}


// APPLICATION SPECIFIC STYLES
@mixin box {
  position:      absolute;
  @include       wh(60%, 100%);
  @include       tl(0%, 20%);
  margin:        auto;
  background:    none;
  box-shadow:    0px 0px 70px 20px lighten($background-color, 30%);
  opacity:       1.0;
}

@mixin box-img {
  position:      absolute;
  @include       wh(100%, 100%);
  @include       tl(0%, 0%);
  margin:        auto;
}

.box1 {
  @include       box;
  animation:     show-box1 $animation-params;
}

.box1 img {
  @include       box-img;
}

.box2 {
  @include       box;
  animation:     show-box2 $animation-params;
}

.box2 img {
  @include       box-img;
}

.learning {
  color:         $learning-color;
  text-align:    center;
  margin-top: 60px;
}

// FOOTER
.footer  {
  color: $footer-color;
  p a:active,
  p a:focus,
  p a:hover,
  p a:visited {
    color: $footer-link;
  }
  //hr { display: none; }
  text-align: center;
  //margin-top: 60px;
}


// ANIMATION FUNCTIONS
/*
*/
@keyframes show-box1 {
   0%   { opacity: 0.0; }
  20%   { opacity: 0.0; }
  20.1%   { opacity: 1.0; }
  90%   { opacity: 1.0; }
  91%   { opacity: 0.0; }
  100%  { opacity: 0.0; }
}

@keyframes show-box2 {
   0%   { opacity: 0.0; }
  30%   { opacity: 0.0; }
  30.1%   { opacity: 1.0; }
  90%   { opacity: 1.0; }
  91%   { opacity: 0.0; }
  100%  { opacity: 0.0; }
}


$X: 4;
@keyframes show-box {
   0%   { transform: translate(0, 0); }
  30%   { transform: translate(0, 0); }

  31%   { transform: translate(0, 0); }
  32%   { transform: translate($X + px, 0); }
  33%   { transform: translate(0, 0); }
  34%   { transform: translate($X + px, 0); }
  35%   { transform: translate(0, 0); }
  36%   { transform: translate($X + px, 0); }
  37%   { transform: translate(0, 0); }
  38%   { transform: translate($X + px, 0); }
  39%   { transform: translate(0, 0); }

  51%   { transform: translate(0, 0); }
  52%   { transform: translate($X + px, 0); }
  53%   { transform: translate(0, 0); }
  54%   { transform: translate($X + px, 0); }
  55%   { transform: translate(0, 0); }
  56%   { transform: translate($X + px, 0); }
  57%   { transform: translate(0, 0); }
  58%   { transform: translate($X + px, 0); }
  59%   { transform: translate(0, 0); }

  71%   { transform: translate(0, 0); }
  72%   { transform: translate($X + px, 0); }
  73%   { transform: translate(0, 0); }
  74%   { transform: translate($X + px, 0); }
  75%   { transform: translate(0, 0); }
  76%   { transform: translate($X + px, 0); }
  77%   { transform: translate(0, 0); }
  78%   { transform: translate($X + px, 0); }
  79%   { transform: translate(0, 0); }


  90%   { transform: translate(0, 0); }
  91%   { transform: translate(0, 0); }
  100%  { transform: translate(0, 0); }
}
