// This uses the SCSS pre-processor language for CSS design.  Like Pub, this allows for much cleaner code.  It also allows helps with more complicated designs, allowing other people to see how things work.

// A couple things that make this cleaner are the consistent alignment of CSS property fields, and the common pattern of how the various mixins are used.

// COMMON MIXINS (ever expanding)
@mixin wh($w, $h) {
  width:  $w;
  height: $h;
}

@mixin tl($t, $l) {
  top:  $t;
  left: $l;
}

@mixin tr($t, $r) {
  top:   $t;
  right: $r;
}

@mixin pseudo {
  position: absolute;
  content:  '';
}

@mixin triangle {
  -webkit-clip-path:
    polygon(50% 0%,
            40% 100%,
            60% 100%);
  clip-path:
    polygon(50% 0%,
            40% 100%,
            60% 100%);
}


// $className -  base name for line divs (allows indenpendent graphs)
// $barWeight -  thickness of each bar
// $barRadius -  end radius of bars
// $values -     relative values for each bar (include units in list)
// $colors -     list of matching colors for bars
// $animations - list of matching annimations for bars (overkill?)
@mixin bar-graph($className, $barWeight, $barRadius, $values, $colors, $animations) {
  @for $i from 1 through length($colors) {
    .#{$className}-#{$i} {
      height:           $barWeight;
      width:            nth($values, $i);
      background-color: nth($colors, $i);
      border-radius:    0 $barRadius $barRadius 0;
      animation:        nth($animations, $i);
    }
  }
}

// ANIMATION DECLARATIONS
//animation: show-NAME $animation-duration $animation-timing-function $animation-delay $animation-iteration-count $animation-direction $animation-fill-mode $animation-play-state;
$animation-duration:         7s;
$animation-delay:            0s;
$animation-timing-function:  linear;     // linear, ease,	ease-in,ease-out, ease-in-out, step-start, step-end, steps(int,start|end), cubic-bezier(n,n,n,n), initial, inherit
$animation-iteration-count:  1; // infinite, <number>
$animation-direction:        normal;   // normal, reverse, alternate, alternate-reverse, initial, inherit
$animation-fill-mode:        forwards;     // none, forwards, backwards, both, initial, inherit
$animation-play-state:       running;  // paused, rinning, initial, inherit
$animation-params: $animation-duration $animation-timing-function $animation-delay $animation-iteration-count $animation-direction $animation-fill-mode $animation-play-state;

// APPLICATION SPECIFIC VARIABLES

$black:          #000000;
$white:          #FFFFFF;
$grey:           #404040;

$blue:           blue;
$purple:         purple;

$body-color:        $black;
$background-color:  $black;
$title-color:       $white;
$title-span-color:  $white;
$learning-color:    $white;
$footer-color:      $white;
$footer-link:       $white;


$animation-duration-wing: 1s;

// COMMON CLASS STYLES
body {
  background:    $background-color;
  color:         $body-color;
  font-family:   sans-serif;
}

.box {
  position:      relative;
  @include       wh(400px, 400px);
  margin:        auto;
  background:    none;
  //overflow:      hidden;
  //border: solid 1px green;
}

.title {
  font-size:     1.5em;
  text-align:    center;
  color:         $title-color;
  margin-bottom: 0px;
}

.title span {
  color:         $title-span-color;
}


// APPLICATION SPECIFIC STYLES
.mat {
  position:      absolute;
  @include       wh(85%, 95%);
  @include       tl(0%, 8%);
  margin:        auto;
  background:    darken($white, 20%);
  border-radius: 1em;
  border:        solid 1px darken($white, 20%);
  overflow:      hidden;
}

.controls {
  position:      absolute;
  @include       wh(100%, 15%);
  @include       tl(0%, 0%);
  margin:        auto;
  background:    $black;
  //border:        solid 1px $black;
  overflow:      hidden;
}

@mixin blur($color) {
  position:      absolute; 
  @include       wh(20px, 20px);
  //background:    lighten($color, 60%); 
  border-radius: 50%;
  box-shadow:    0px 0px 20px 30px lighten($color, 60%);
}

.hex-thing-back {
  @include       blur($black);
  @include       tl(20%, 47%);
  margin:        auto;
  background:    lighten($black, 60%);
  transform:     scale(1.2, 1);
}

.hex-thing {
  position:      absolute;
  @include       wh(80px, 80px);
  @include       tl(-80%, 39%);
  margin:        auto;
  background:    $black;
  clip-path:     polygon(50% 0%, 90% 20%, 100% 60%, 75% 100%, 25% 100%, 0% 60%, 10% 20%);
  &:before {
    position:    absolute;
    @include     tl(75%, 40%);
    content:     'W';
    color:       darken($white, 40%);
    font-weight: 900;
    font-size:   1em;
  }
  &:after {
    @include       pseudo;
    @include       wh(70%, 70%);
    @include       tl(0%, 15%);
    margin:        auto;
    background:    lighten($black, 10%);
    clip-path:     polygon(50% 0%, 90% 20%, 100% 60%, 75% 100%, 25% 100%, 0% 60%, 10% 20%);
  }
}

.select {
  position:      absolute;
  @include       wh(10%, 20%);
  @include       tl(30%, 10%);
  margin:        auto;
  background:    $purple;
  border:        solid 1px $white;
  border-radius: 1em;
  &:before {
    position:    absolute;
    @include     tl(140%, -30%);
    content:     'SELECT';
    color:       $white;
  }
}

.start {
  position:      absolute;
  @include       wh(10%, 20%);
  @include       tl(30%, 80%);
  margin:        auto;
  background:    $blue;
  border:        solid 1px $white;
  border-radius: 1em;
  &:before {
    position:    absolute;
    @include     tl(140%, -10%);
    content:     'START';
    color:       $white;
  }
}

@mixin arrow($color) {
  position:      absolute;
  @include       wh(100%, 100%);
  @include       tl(0%, 0%);
  margin:        auto;
  background:    $color;
  overflow:      hidden;
  &:before {
    @include     pseudo;
    @include     wh(20px, 20px);
    @include     tl(20%, 37%);
    background:   darken($color, 40%); 
    border-radius: 50%;
    box-shadow:    0px 0px 20px 25px darken($color, 40%);
  }
  transform:     scale(0.8, 0.8) rotate(-45deg);  
}

.arrow-blue {
  @include       arrow($blue);
}

.arrow-purple {
  @include       arrow($purple);
  transform:     scale(0.8, 0.8) rotate(45deg);  
}

@mixin arrow-box {
  position:      absolute;
  @include       wh(20%, 20%);
  margin:        auto;
  background:    none;
  overflow:      hidden; 
  i {
    position:      absolute;
    @include     wh(30px, 30px);
    @include     tl(25%, 15%); 
    color:       $white;
    //font-weight: bold;
    font-size:   3em;
    transform:   rotate(-45deg);
  }
}

.arrow-up {
  @include       arrow-box;
  @include       tl(18%, 40%);
  transform:     scale(1.4, 1.4) rotate(45deg);
}

.arrow-down {
  @include       arrow-box;
  @include       tl(72%, 40%);
  transform:     scale(1.4, -1.4) rotate(45deg);
}

.arrow-left {
  @include       arrow-box;
  @include       tl(45%, 12%);
  transform:     scale(-1.4, 1.4) rotate(45deg);
}

.arrow-right {
  @include       arrow-box;
  @include       tl(45%, 68%);
  transform:     scale(1.4, 1.4) rotate(45deg);
}

@mixin symbol-back {
  position:      absolute;
  @include       wh(20%, 20%);
  margin:        auto;
  background:    $black;
  border-radius: 1em;
  overflow:      hidden;
  &:before {
    @include     pseudo;
    @include     wh(20px, 20px);
    @include     tl(35%, 37%);
    background:   lighten($black, 70%); 
    border-radius: 50%;
    box-shadow:    0px 0px 20px 20px lighten($black, 70%);
  }  
  i {
    position:      absolute;
    @include     wh(20px, 20px);
    @include     tl(30%, 37%); 
    color:       $black;
    font-weight: bold;
    font-size:   2em;
  }
}

.symbol-x {
  @include       symbol-back;
  @include       tl(18%,12%);
}

.symbol-o {
  @include       symbol-back;
  @include       tl(18%, 68%);
}

.symbol-triangle {
  @include       symbol-back;
  @include       tl(72%, 12%);
}

.symbol-square {
  @include       symbol-back;
  @include       tl(72%, 68%);
}

.center {
  position:      absolute;
  @include       wh(35%, 35%);
  @include       tl(37%, 32%);
  margin:        auto;
  background:    $black;
  border:        solid 2px $white;
  border-radius: 50%;
  overflow:      hidden;
  img {
    @include       wh(100%, 100%);
    @include       tl(0%, 0%);
    transform:     scale(2.2, 3.6) translate(-14px, -4px);
  }
}

.learning {
  color:         $learning-color;
  text-align:    center;
  margin-top:    0px;
  z-index:       2;
}

// FOOTER
.footer  {
  color: $footer-color;
  p a:active,
  p a:focus,
  p a:hover,
  p a:visited {
    color: $footer-link;
  }
  //hr { display: none; }
  text-align: center;
  //margin-top: 60px;
}


// ANIMATION FUNCTIONS
/*
@keyframes show-string1 {
    0%  { transform: translate(0, 0); }
   10%  { transform: translate(0, 0); }
   40%  { transform: translate(0, -150px); }
  100%  { transform: translate(0, -150px); }
}
*/
